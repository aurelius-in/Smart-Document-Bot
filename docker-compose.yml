version: '3.8'

services:
  # Redis for caching and short-term memory
  redis:
    image: redis:7-alpine
    container_name: redline-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - redline-network

  # PostgreSQL with pgvector for vector storage
  postgres:
    image: pgvector/pgvector:pg15
    container_name: redline-postgres
    environment:
      POSTGRES_DB: redline
      POSTGRES_USER: redline_user
      POSTGRES_PASSWORD: redline_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U redline_user -d redline"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - redline-network

  # ChromaDB for vector database
  chromadb:
    image: chromadb/chroma:latest
    container_name: redline-chromadb
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - redline-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: redline-backend
    ports:
      - "8001:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://redline_user:redline_password@postgres:5432/redline
      - CHROMA_PERSIST_DIRECTORY=/app/chroma_db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./chroma_db:/app/chroma_db
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    networks:
      - redline-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: redline-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_WS_URL=ws://localhost:8001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - redline-network
    command: npm start

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: redline-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - redline-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: redline-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - redline-network

  # Document Processing Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: redline-worker
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://redline_user:redline_password@postgres:5432/redline
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./uploads:/app/uploads
      - ./output:/app/output
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - redline-network
    command: celery -A app.core.celery worker --loglevel=info

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: redline-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - redline-network

volumes:
  redis_data:
  postgres_data:
  chromadb_data:
  prometheus_data:
  grafana_data:

networks:
  redline-network:
    driver: bridge
